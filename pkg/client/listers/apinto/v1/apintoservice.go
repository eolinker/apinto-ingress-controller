/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/eolinker/apinto-ingress-controller/pkg/apis/apinto/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApintoServiceLister helps list ApintoServices.
// All objects returned here must be treated as read-only.
type ApintoServiceLister interface {
	// List lists all ApintoServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoService, err error)
	// ApintoServices returns an object that can list and get ApintoServices.
	ApintoServices(namespace string) ApintoServiceNamespaceLister
	ApintoServiceListerExpansion
}

// apintoServiceLister implements the ApintoServiceLister interface.
type apintoServiceLister struct {
	indexer cache.Indexer
}

// NewApintoServiceLister returns a new ApintoServiceLister.
func NewApintoServiceLister(indexer cache.Indexer) ApintoServiceLister {
	return &apintoServiceLister{indexer: indexer}
}

// List lists all ApintoServices in the indexer.
func (s *apintoServiceLister) List(selector labels.Selector) (ret []*v1.ApintoService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoService))
	})
	return ret, err
}

// ApintoServices returns an object that can list and get ApintoServices.
func (s *apintoServiceLister) ApintoServices(namespace string) ApintoServiceNamespaceLister {
	return apintoServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApintoServiceNamespaceLister helps list and get ApintoServices.
// All objects returned here must be treated as read-only.
type ApintoServiceNamespaceLister interface {
	// List lists all ApintoServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoService, err error)
	// Get retrieves the ApintoService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ApintoService, error)
	ApintoServiceNamespaceListerExpansion
}

// apintoServiceNamespaceLister implements the ApintoServiceNamespaceLister
// interface.
type apintoServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApintoServices in the indexer for a given namespace.
func (s apintoServiceNamespaceLister) List(selector labels.Selector) (ret []*v1.ApintoService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoService))
	})
	return ret, err
}

// Get retrieves the ApintoService from the indexer for a given namespace and name.
func (s apintoServiceNamespaceLister) Get(name string) (*v1.ApintoService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("apintoservice"), name)
	}
	return obj.(*v1.ApintoService), nil
}
