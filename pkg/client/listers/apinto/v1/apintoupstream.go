/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/eolinker/apinto-ingress-controller/pkg/apis/apinto/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApintoUpstreamLister helps list ApintoUpstreams.
// All objects returned here must be treated as read-only.
type ApintoUpstreamLister interface {
	// List lists all ApintoUpstreams in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoUpstream, err error)
	// ApintoUpstreams returns an object that can list and get ApintoUpstreams.
	ApintoUpstreams(namespace string) ApintoUpstreamNamespaceLister
	ApintoUpstreamListerExpansion
}

// apintoUpstreamLister implements the ApintoUpstreamLister interface.
type apintoUpstreamLister struct {
	indexer cache.Indexer
}

// NewApintoUpstreamLister returns a new ApintoUpstreamLister.
func NewApintoUpstreamLister(indexer cache.Indexer) ApintoUpstreamLister {
	return &apintoUpstreamLister{indexer: indexer}
}

// List lists all ApintoUpstreams in the indexer.
func (s *apintoUpstreamLister) List(selector labels.Selector) (ret []*v1.ApintoUpstream, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoUpstream))
	})
	return ret, err
}

// ApintoUpstreams returns an object that can list and get ApintoUpstreams.
func (s *apintoUpstreamLister) ApintoUpstreams(namespace string) ApintoUpstreamNamespaceLister {
	return apintoUpstreamNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApintoUpstreamNamespaceLister helps list and get ApintoUpstreams.
// All objects returned here must be treated as read-only.
type ApintoUpstreamNamespaceLister interface {
	// List lists all ApintoUpstreams in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoUpstream, err error)
	// Get retrieves the ApintoUpstream from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ApintoUpstream, error)
	ApintoUpstreamNamespaceListerExpansion
}

// apintoUpstreamNamespaceLister implements the ApintoUpstreamNamespaceLister
// interface.
type apintoUpstreamNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApintoUpstreams in the indexer for a given namespace.
func (s apintoUpstreamNamespaceLister) List(selector labels.Selector) (ret []*v1.ApintoUpstream, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoUpstream))
	})
	return ret, err
}

// Get retrieves the ApintoUpstream from the indexer for a given namespace and name.
func (s apintoUpstreamNamespaceLister) Get(name string) (*v1.ApintoUpstream, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("apintoupstream"), name)
	}
	return obj.(*v1.ApintoUpstream), nil
}
