/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/eolinker/apinto-ingress-controller/pkg/apis/apinto/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApintoSettingLister helps list ApintoSettings.
// All objects returned here must be treated as read-only.
type ApintoSettingLister interface {
	// List lists all ApintoSettings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoSetting, err error)
	// ApintoSettings returns an object that can list and get ApintoSettings.
	ApintoSettings(namespace string) ApintoSettingNamespaceLister
	ApintoSettingListerExpansion
}

// apintoSettingLister implements the ApintoSettingLister interface.
type apintoSettingLister struct {
	indexer cache.Indexer
}

// NewApintoSettingLister returns a new ApintoSettingLister.
func NewApintoSettingLister(indexer cache.Indexer) ApintoSettingLister {
	return &apintoSettingLister{indexer: indexer}
}

// List lists all ApintoSettings in the indexer.
func (s *apintoSettingLister) List(selector labels.Selector) (ret []*v1.ApintoSetting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoSetting))
	})
	return ret, err
}

// ApintoSettings returns an object that can list and get ApintoSettings.
func (s *apintoSettingLister) ApintoSettings(namespace string) ApintoSettingNamespaceLister {
	return apintoSettingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApintoSettingNamespaceLister helps list and get ApintoSettings.
// All objects returned here must be treated as read-only.
type ApintoSettingNamespaceLister interface {
	// List lists all ApintoSettings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoSetting, err error)
	// Get retrieves the ApintoSetting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ApintoSetting, error)
	ApintoSettingNamespaceListerExpansion
}

// apintoSettingNamespaceLister implements the ApintoSettingNamespaceLister
// interface.
type apintoSettingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApintoSettings in the indexer for a given namespace.
func (s apintoSettingNamespaceLister) List(selector labels.Selector) (ret []*v1.ApintoSetting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoSetting))
	})
	return ret, err
}

// Get retrieves the ApintoSetting from the indexer for a given namespace and name.
func (s apintoSettingNamespaceLister) Get(name string) (*v1.ApintoSetting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("apintosetting"), name)
	}
	return obj.(*v1.ApintoSetting), nil
}
