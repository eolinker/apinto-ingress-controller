/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/eolinker/apinto-ingress-controller/pkg/kube/apinto/configs/apinto/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApintoAuthLister helps list ApintoAuths.
// All objects returned here must be treated as read-only.
type ApintoAuthLister interface {
	// List lists all ApintoAuths in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoAuth, err error)
	// ApintoAuths returns an object that can list and get ApintoAuths.
	ApintoAuths(namespace string) ApintoAuthNamespaceLister
	ApintoAuthListerExpansion
}

// apintoAuthLister implements the ApintoAuthLister interface.
type apintoAuthLister struct {
	indexer cache.Indexer
}

// NewApintoAuthLister returns a new ApintoAuthLister.
func NewApintoAuthLister(indexer cache.Indexer) ApintoAuthLister {
	return &apintoAuthLister{indexer: indexer}
}

// List lists all ApintoAuths in the indexer.
func (s *apintoAuthLister) List(selector labels.Selector) (ret []*v1.ApintoAuth, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoAuth))
	})
	return ret, err
}

// ApintoAuths returns an object that can list and get ApintoAuths.
func (s *apintoAuthLister) ApintoAuths(namespace string) ApintoAuthNamespaceLister {
	return apintoAuthNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApintoAuthNamespaceLister helps list and get ApintoAuths.
// All objects returned here must be treated as read-only.
type ApintoAuthNamespaceLister interface {
	// List lists all ApintoAuths in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ApintoAuth, err error)
	// Get retrieves the ApintoAuth from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ApintoAuth, error)
	ApintoAuthNamespaceListerExpansion
}

// apintoAuthNamespaceLister implements the ApintoAuthNamespaceLister
// interface.
type apintoAuthNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApintoAuths in the indexer for a given namespace.
func (s apintoAuthNamespaceLister) List(selector labels.Selector) (ret []*v1.ApintoAuth, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ApintoAuth))
	})
	return ret, err
}

// Get retrieves the ApintoAuth from the indexer for a given namespace and name.
func (s apintoAuthNamespaceLister) Get(name string) (*v1.ApintoAuth, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("apintoauth"), name)
	}
	return obj.(*v1.ApintoAuth), nil
}
